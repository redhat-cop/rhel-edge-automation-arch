- name: Assert Extra Variables are Defined
  ansible.builtin.assert:
    fail_msg: >
      Make sure the following extra variables are defined before running this role:
      - build_commit_id
      - iso_url_output_file
      - kickstart_url
    that:
      - build_commit_id is defined
      - iso_url_output_file is defined
      - kickstart_url is defined

- name: List Finished Builds
  ansible.builtin.command: >
    composer-cli -j compose list finished
  changed_when: false
  register: compose_list

- name: Assert Finished Build ID Found
  ansible.builtin.assert:
    fail_msg: "Did not find a valid finished build for the commit id {{ build_commit_id }}!"
    that:
      - compose_list.stdout | from_json | selectattr('id', 'equalto', build_commit_id) | list | length == 1

- name: Set Remote Tar Directory
  ansible.builtin.set_fact:
    iso_directory: "/tmp/{{ build_commit_id }}"
    edge_iso_path: "/var/www/html/{{ build_commit_id }}-auto.iso"

- name: Create Remote Tar Directory
  ansible.builtin.file:
    path: "{{ iso_directory }}"
    state: directory

- name: Generate Edge Install ISO Image
  ansible.builtin.command: >
    composer-cli compose image {{ build_commit_id | quote }}
  args:
    chdir: "{{ iso_directory }}"
  register: compose_image_results
  failed_when:
    - compose_image_results.rc != 0
    - '"skipping download" not in compose_image_results.stdout'

- name: Find Edge Image File
  ansible.builtin.find:
    depth: 0
    paths: "{{ iso_directory }}"
    patterns:
      - "{{ build_commit_id }}-installer.iso"
    use_regex: yes
  register: find_results
  failed_when:
    - find_results.failed == true
    - find_results.files | list != 1

- name: Set Path Variables
  ansible.builtin.set_fact:
    scratch_path: "{{ iso_directory }}/scratch"
    iso_mount_path: "{{ iso_directory }}/mount"
    iso_source_path: "{{ find_results.files[0].path }}"

- name: Process ISO
  block:
    - name: Get ISO Label
      ansible.builtin.command: >
        blkid -s LABEL -o value {{ iso_source_path | quote }}
      register: iso_source_label

    - name: Create Working Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ scratch_path }}"
        - "{{ iso_mount_path }}"

    - name: Mount ISO
      ansible.posix.mount:
        boot: no
        fstype: iso9660
        opts: loop
        path: "{{ iso_mount_path }}"
        src: "{{ iso_source_path }}"
        state: mounted

    - name: Copy ISO Contents to Scratch Directory
      ansible.posix.synchronize:
        dest: "{{ scratch_path }}/"
        recursive: yes
        src: "{{ iso_mount_path }}/"
      delegate_to: "{{ inventory_hostname }}"

    - name: Copy Kickstart File to Scratch Directory
      ansible.builtin.get_url:
        dest: "{{ scratch_path }}/kickstart.ks"
        url: "{{ kickstart_url }}"
        validate_certs: no

    - name: Copy Updated Grub Configuration
      ansible.builtin.template:
        dest: "{{ scratch_path }}/EFI/BOOT/grub.cfg"
        group: root
        mode: "0644"
        owner: root
        src: grub.cfg.j2

    - name: Copy Updated ISOLINUX Configuration
      ansible.builtin.template:
        dest: "{{ scratch_path }}/isolinux/isolinux.cfg"
        group: root
        mode: "0644"
        owner: root
        src: isolinux.cfg.j2

    - name: Generate Bootable ISO
      ansible.builtin.shell:
        chdir: "{{ scratch_path }}"
        cmd: |
          mkisofs \
          -o {{ edge_iso_path | quote }} \
          -b isolinux/isolinux.bin \
          -J \
          -R \
          -l \
          -c isolinux/boot.cat \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          -eltorito-alt-boot \
          -e images/efiboot.img \
          -no-emul-boot \
          -graft-points \
          -V "{{ iso_source_label.stdout | quote }}" .
      register: rfe_iso_results

    - name: Build EFI Bootable Image
      ansible.builtin.shell:
        cmd: isohybrid --uefi {{ edge_iso_path | quote }}
  always:
    - name: Remove ISO Mount
      ansible.posix.mount:
        path: "{{ iso_mount_path }}"
        state: absent

    - name: Remove Working Directories and Files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ iso_directory }}"

- name: Upload ISO to Nexus
  vars:
    file_to_upload: "{{ edge_iso_path }}"
  ansible.builtin.include_role:
    name: nexus-upload

- name: Pull ISO From Image Builder to httpd Pod
  ansible.builtin.get_url:
    dest: "{{ edge_iso_path }}"
    url: "http://{{ image_builder_host }}/{{ edge_iso_path | basename }}"
  become: no
  delegate_to: "{{ groups.httpd_pod_group[0] }}"

- name: Remove ISO From Image Builder
  ansible.builtin.file:
    path: "{{ edge_iso_path }}"
    state: absent

- name: Get httpd Route
  community.kubernetes.k8s_info:
    api_key: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"
    api_version: route.openshift.io/v1
    ca_cert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    host: https://kubernetes.default.svc
    kind: Route
    name: httpd
    namespace: rfe
    validate_certs: yes
  become: no
  register: httpd_route
  delegate_to: localhost

- name: Set iso-url Result
  ansible.builtin.copy:
    content: "{{ ('https://' if httpd_route.resources[0].spec.tls is defined else 'http://') + httpd_route.resources[0].spec.host }}/{{ edge_iso_path | basename }}"
    dest: "{{ iso_url_output_file }}"
  become: no
  delegate_to: localhost
