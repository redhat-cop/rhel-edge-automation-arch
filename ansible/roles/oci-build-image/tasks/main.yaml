- name: Verify Blueprint Source Directory is Defined
  ansible.builtin.assert:
    fail_msg: Blueprints Source Directory Must be Defined
    that:
      - blueprint_source_dir is defined

- name: Validate Blueprint Directory and Blueprint File Exists
  ansible.builtin.stat:
    path: "{{ item }}"
  become: true
  delegate_to: localhost
  failed_when: not blueprint_exists.stat.exists
  loop:
    - "{{ blueprint_source_dir }}"
    - "{{ blueprint_source_dir }}/blueprint.toml"
  register: blueprint_exists

- name: Create Blueprints Directory
  ansible.builtin.file:
    mode: preserve
    path: "{{ base_rpm_ostree_blueprints_dir }}"
    state: directory

- name: Set Blueprint Facts
  ansible.builtin.set_fact:
    blueprint_name: "{{ blueprint_source_dir | basename }}"
    build_blueprint_dir: "{{ base_rpm_ostree_blueprints_dir }}/{{ blueprint_source_dir | basename }}"

- name: Copy Blueprints Directory to Image Builder
  ansible.builtin.copy:
    mode: preserve
    dest: "{{ build_blueprint_dir }}/"
    src: "{{ blueprint_source_dir }}/"

- name: Push Blueprint to Server
  ansible.builtin.command: >
    composer-cli blueprints push "{{ build_blueprint_dir }}/blueprint.toml"
  changed_when: _blueprints_push.rc == 0
  register: _blueprints_push

- name: Resolve Dependencies
  ansible.builtin.command: >
    composer-cli blueprints depsolve {{ blueprint_name }}
  changed_when: _blueprints_depsolve.rc == 0
  register: _blueprints_depsolve

- name: Freeze Blueprint
  ansible.builtin.command: >
    composer-cli -j blueprints freeze {{ blueprint_name }}
  changed_when: frozen_blueprint.rc == 0
  register: frozen_blueprint

- name: Set Blueprint Version Number
  ansible.builtin.set_fact:
    blueprint_version: "{{ (frozen_blueprint.stdout | from_json | first).body.blueprints[0].blueprint.version }}"

- name: Compose Image
  ansible.builtin.command: >
    composer-cli -j compose start-ostree {{ blueprint_name }} rhel-edge-container
  changed_when: composer_image.rc == 0
  register: composed_image

- name: Set Build Commit ID
  ansible.builtin.set_fact:
    build_commit_id: "{{ (composed_image.stdout | from_json | first).body.build_id }}"

- name: Wait for Compose to Finish
  ansible.builtin.command: >
    composer-cli -j compose status
  changed_when: >-
    (
      status_results.stdout | from_json | json_query(_body_query) | flatten | json_query(_id_query) | first
    ).queue_status | default("UNKNOWN") in _compose_statuses
  delay: 15
  failed_when: >-
    (
      status_results.stdout | from_json | json_query(_body_query) | flatten | json_query(_id_query) | first
    ).queue_status | default("UNKNOWN") != "FINISHED"
  register: status_results
  retries: 400
  until: >-
    (
      status_results.stdout | from_json | json_query(_body_query) | flatten | json_query(_id_query) | first
    ).queue_status | default("UNKNOWN") == "FINISHED"
  vars:
    _body_query: "[*].body.[failed,finished,new,run]"
    _id_query: "[?id=='{{ build_id }}']"

- name: Save Build Commit ID to File
  ansible.builtin.copy:
    content: "{{ build_commit_id }}"
    dest: "{{ build_commit_output_file }}"
    mode: preserve
  become: false
  delegate_to: localhost
