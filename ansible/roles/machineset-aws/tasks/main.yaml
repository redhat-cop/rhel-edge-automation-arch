- name: Query Cluster Infrastructure Name
  community.kubernetes.k8s_info:
    api_key: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"
    api_version: config.openshift.io/v1
    ca_cert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    host: https://kubernetes.default.svc
    kind: Infrastructure
    name: cluster
    validate_certs: yes
  register: cluster_info

- name: Assert Platform is AWS
  ansible.builtin.assert:
    fail_msg: "Platform for OpenShift cluster must be AWS!"
    that:
      - cluster_info.resources[0].status.platform == "AWS"

- name: Query MachineSets
  community.kubernetes.k8s_info:
    api_key: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"
    api_version: machine.openshift.io/v1beta1
    ca_cert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    host: https://kubernetes.default.svc
    kind: MachineSet
    namespace: openshift-machine-api
    validate_certs: yes
  register: cluster_machinesets

- name: Set Dynamic MachineSet Facts
  ansible.builtin.set_fact:
    machineset_ami_id: "{{ cluster_machinesets.resources[0].spec.template.spec.providerSpec.value.ami.id }}"
    machineset_subnet: "{{ cluster_machinesets.resources[0].spec.template.spec.providerSpec.value.subnet.filters[0]['values'][0] }}"
    machineset_tags: "{{ cluster_machinesets.resources[0].spec.template.spec.providerSpec.value.tags }}"
    machineset_zone: "{{ cluster_machinesets.resources[0].spec.template.spec.providerSpec.value.placement.availabilityZone }}"
    infrastructure_name: "{{ cluster_info.resources[0].status.infrastructureName }}"
    infrastructure_region: "{{ cluster_info.resources[0].status.platformStatus.aws.region }}"

- name: Create MachineSet
  community.kubernetes.k8s:
    api_key: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"
    ca_cert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    definition: "{{ lookup('template', 'templates/machineset.yaml.j2') | from_yaml }}"
    host: https://kubernetes.default.svc
    state: present
    validate_certs: yes
